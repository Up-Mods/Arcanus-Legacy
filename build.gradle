plugins {
    id 'maven-publish'
    alias libs.plugins.quilt.loom
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

def javaVersion = 17

group = "dev.cammiescorner"
archivesBaseName = "arcanus-legacy"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${libs.versions.minecraft.get()}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

// messy workaround for bug in quilt loom 1.3.3
project.configurations.configureEach {
    exclude(group: "net.fabricmc", module: "fabric-loader")
    exclude(group: "net.fabricmc.fabric-api")
}

repositories {
    maven { url "https://maven.ladysnake.org/releases" }
    maven { url "https://maven.terraformersmc.com" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft libs.minecraft

    mappings variantOf(libs.quilt.mappings) { classifier "intermediary-v2" }

    modImplementation libs.quilt.loader
    modImplementation libs.quilted.fabric.api

    modImplementation libs.midnightlib

    include libs.mixinextras
    implementation libs.mixinextras
    annotationProcessor libs.mixinextras

    modImplementation libs.bundles.cca

    // modmenu
    modLocalRuntime libs.modmenu

    // LazyDFU
    modLocalRuntime libs.lazydfu
}

loom {
    accessWidenerPath = file("src/main/resources/arcanus.accesswidener")
}

processResources {
    inputs.property "version", version

    filesMatching('quilt.mod.json') {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(javaVersion)
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

jar {
    from("LICENSE.md") {
        rename { "LICENSE_${archivesBaseName}.md" }
    }

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": libs.versions.minecraft.get(),
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USERNAME
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}
